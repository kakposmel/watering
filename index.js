const express = require('express');
const path = require('path');
const MoistureSensor = require('./src/moisture');
const PumpController = require('./src/pump');
const AutoWateringScheduler = require('./src/scheduler');
const TelegramBotController = require('./src/telegram');
const LEDController = require('./src/led');
const Storage = require('./src/storage');
const config = require('./src/config');
const logger = require('./src/logger');

const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const storage = new Storage();
const moistureSensor = new MoistureSensor();
const ledController = new LEDController();
const telegramBot = new TelegramBotController(moistureSensor, null);
const pumpController = new PumpController(telegramBot);
const scheduler = new AutoWateringScheduler(moistureSensor, pumpController, telegramBot, ledController);

// –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
moistureSensor.setStorage(storage);
pumpController.setStorage(storage);

// –°–≤—è–∑—ã–≤–∞–µ–º Telegram bot —Å pump controller
telegramBot.pumpController = pumpController;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
async function initializeSystem() {
  try {
    await storage.initialize();
    
    if (!await moistureSensor.initialize()) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—á–∏–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏');
    }
    
    if (!ledController.initialize()) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LED –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä');
    }
    
    if (!telegramBot.initialize()) {
      logger.warn('Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    scheduler.start();
    logger.info('–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞');
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
  }
}

initializeSystem();Controller(telegramBot);
const scheduler = new AutoWateringScheduler(moistureSensor, pumpController, telegramBot, ledController);

// –°–≤—è–∑—ã–≤–∞–µ–º Telegram bot —Å pump controller
telegramBot.pumpController = pumpController;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// API Routes
app.get('/api/status', async (req, res) => {
  try {
    const sensors = await moistureSensor.readAllSensors();
    const pumps = pumpController.getPumpStates();
    const settings = await storage.loadSettings();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º LED –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤
    ledController.updateFromSensorReadings(sensors);
    
    res.json({
      sensors,
      pumps,
      settings,
      timestamp: new Date()
    });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/history', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 100;
    const history = await storage.loadHistory(limit);
    res.json(history);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/toggle-zone/:zone', async (req, res) => {
  const zone = parseInt(req.params.zone);
  
  if (zone < 0 || zone >= config.relays.length) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã' });
  }
  
  try {
    const settings = await storage.loadSettings();
    settings.zones[zone].enabled = !settings.zones[zone].enabled;
    await storage.saveSettings(settings);
    
    res.json({ 
      success: true, 
      enabled: settings.zones[zone].enabled,
      message: `–ó–æ–Ω–∞ ${zone + 1} ${settings.zones[zone].enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–æ–Ω—ã ${zone + 1}:`, error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/water/:zone', async (req, res) => {
  const zone = parseInt(req.params.zone);
  
  if (zone < 0 || zone >= config.relays.length) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã' });
  }
  
  try {
    const success = await pumpController.startWatering(zone);
    res.json({ 
      success, 
      message: success ? `–ü–æ–ª–∏–≤ –∑–æ–Ω—ã ${zone + 1} –∑–∞–ø—É—â–µ–Ω` : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–∏–≤'
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª–∏–≤–∞ –∑–æ–Ω—ã ${zone + 1}:`, error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/stop/:zone', (req, res) => {
  const zone = parseInt(req.params.zone);
  
  if (zone < 0 || zone >= config.relays.length) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã' });
  }
  
  try {
    const success = pumpController.stopWatering(zone);
    res.json({ 
      success, 
      message: success ? `–ü–æ–ª–∏–≤ –∑–æ–Ω—ã ${zone + 1} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω` : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–∏–≤'
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–∏–≤–∞ –∑–æ–Ω—ã ${zone + 1}:`, error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/stop-all', (req, res) => {
  try {
    pumpController.stopAllPumps();
    res.json({ success: true, message: '–í—Å–µ –Ω–∞—Å–æ—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –Ω–∞—Å–æ—Å–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/test-all', async (req, res) => {
  try {
    for (let i = 0; i < config.relays.length; i++) {
      pumpController.relays[i].writeSync(0); // –í–∫–ª—é—á–∏—Ç—å
      await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã
      pumpController.relays[i].writeSync(1); // –í—ã–∫–ª—é—á–∏—Ç—å
    }
    res.json({ success: true, message: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω' });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª–∏–≤–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Graceful shutdown
process.on('SIGINT', () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  ledController.cleanup();
  pumpController.cleanup();
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  ledController.cleanup();
  pumpController.cleanup();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
    const fs = require('fs');
    if (!fs.existsSync(path.join(__dirname, 'logs'))) {
      fs.mkdirSync(path.join(__dirname, 'logs'));
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
    const sensorInit = await moistureSensor.initialize();
    if (!sensorInit) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—á–∏–∫–∏');
      process.exit(1);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    const ledInit = ledController.initialize();
    if (ledInit) {
      logger.info('LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } else {
      logger.warn('LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram bot
    const telegramInit = telegramBot.initialize();
    if (telegramInit) {
      logger.info('Telegram bot –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } else {
      logger.warn('Telegram bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
    }
    
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start();
    
    // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app.listen(config.server.port, () => {
      logger.info(`üåø –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.server.port}`);
      logger.info(`üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:${config.server.port}`);
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();


const express = require('express');
const path = require('path');
const MoistureSensor = require('./src/moisture');
const PumpController = require('./src/pump');
const AutoWateringScheduler = require('./src/scheduler');
const TelegramBotController = require('./src/telegram');
const LEDController = require('./src/led');
const Storage = require('./src/storage');
const config = require('./src/config');
const logger = require('./src/logger');

const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const storage = new Storage();
const moistureSensor = new MoistureSensor();
const ledController = new LEDController();
const pumpController = new PumpController();
const telegramBot = new TelegramBotController(moistureSensor, pumpController);
const scheduler = new AutoWateringScheduler(moistureSensor, pumpController, telegramBot, ledController);

// –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
moistureSensor.setStorage(storage);
pumpController.setStorage(storage);

// –°–≤—è–∑—ã–≤–∞–µ–º telegram bot —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
moistureSensor.setTelegramBot(telegramBot);

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// API Routes
app.get('/api/status', async (req, res) => {
  try {
    const sensors = await moistureSensor.readAllSensors();
    const pumps = pumpController.getPumpStates();
    const settings = await storage.loadSettings();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º LED –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤
    if (config.led.enabled) {
      ledController.updateFromSensorReadings(sensors);
    }
    
    res.json({
      sensors,
      pumps,
      settings,
      timestamp: new Date()
    });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ Telegram
    if (telegramBot.bot) {
      telegramBot.sendErrorNotification('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã', error.message);
    }
    
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/history', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 100;
    const history = await storage.loadHistory(limit);
    res.json(history);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/toggle-zone/:zone', async (req, res) => {
  const zone = parseInt(req.params.zone);
  
  if (zone < 0 || zone >= config.relays.length) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã' });
  }
  
  try {
    const settings = await storage.loadSettings();
    settings.zones[zone].enabled = !settings.zones[zone].enabled;
    await storage.saveSettings(settings);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–æ–Ω—ã
    if (telegramBot.bot) {
      telegramBot.sendSystemNotification(
        `–ó–æ–Ω–∞ ${zone + 1} ${settings.zones[zone].enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`
      );
    }
    
    res.json({ 
      success: true, 
      enabled: settings.zones[zone].enabled,
      message: `–ó–æ–Ω–∞ ${zone + 1} ${settings.zones[zone].enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–æ–Ω—ã ${zone + 1}:`, error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/water/:zone', async (req, res) => {
  const zone = parseInt(req.params.zone);
  
  if (zone < 0 || zone >= config.relays.length) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã' });
  }
  
  try {
    const success = await pumpController.startWatering(zone);
    res.json({ 
      success, 
      message: success ? `–ü–æ–ª–∏–≤ –∑–æ–Ω—ã ${zone + 1} –∑–∞–ø—É—â–µ–Ω` : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–∏–≤'
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª–∏–≤–∞ –∑–æ–Ω—ã ${zone + 1}:`, error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/stop/:zone', async (req, res) => {
  const zone = parseInt(req.params.zone);
  
  if (zone < 0 || zone >= config.relays.length) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã' });
  }
  
  try {
    const success = await pumpController.stopWatering(zone);
    res.json({ 
      success, 
      message: success ? `–ü–æ–ª–∏–≤ –∑–æ–Ω—ã ${zone + 1} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω` : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–∏–≤'
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–∏–≤–∞ –∑–æ–Ω—ã ${zone + 1}:`, error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/stop-all', async (req, res) => {
  try {
    await pumpController.stopAllPumps();
    res.json({ success: true, message: '–í—Å–µ –Ω–∞—Å–æ—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –Ω–∞—Å–æ—Å–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/test-all', async (req, res) => {
  try {
    for (let i = 0; i < config.relays.length; i++) {
      if (pumpController.relays[i]) {
        pumpController.relays[i].writeSync(0); // –í–∫–ª—é—á–∏—Ç—å
        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã
        pumpController.relays[i].writeSync(1); // –í—ã–∫–ª—é—á–∏—Ç—å
      }
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–æ–ª–∏–≤–µ
    if (telegramBot.bot) {
      telegramBot.sendSystemNotification('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª–∏–≤ –≤—Å–µ—Ö –∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
    
    res.json({ success: true, message: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω' });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª–∏–≤–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Graceful shutdown
process.on('SIGINT', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  if (config.led.enabled) {
    ledController.cleanup();
  }
  await pumpController.cleanup();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  if (config.led.enabled) {
    ledController.cleanup();
  }
  await pumpController.cleanup();
  process.exit(0);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
async function initializeSystem() {
  try {
    logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞...');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
    const fs = require('fs');
    if (!fs.existsSync(path.join(__dirname, 'logs'))) {
      fs.mkdirSync(path.join(__dirname, 'logs'));
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    await storage.initialize();
    logger.info('–•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    const sensorInit = await moistureSensor.initialize();
    if (!sensorInit) {
      const errorMsg = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—á–∏–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏';
      logger.error(errorMsg);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ Telegram –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
      if (telegramBot.initialize()) {
        await telegramBot.sendErrorNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã', errorMsg);
      }
      process.exit(1);
    }
    logger.info('–î–∞—Ç—á–∏–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–∞—Å–æ—Å–æ–≤
    const pumpInit = await pumpController.initialize();
    if (!pumpInit) {
      logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å–æ—Å–æ–≤');
    } else {
      logger.info('–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞—Å–æ—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (config.led.enabled) {
      const ledInit = ledController.initialize();
      if (ledInit) {
        logger.info('LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω');
      } else {
        logger.warn('LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å');
      }
    } else {
      logger.info('LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram bot
    const telegramInit = telegramBot.initialize();
    if (telegramInit) {
      logger.info('Telegram bot –ø–æ–¥–∫–ª—é—á–µ–Ω');
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
      await telegramBot.sendSystemNotification('üåø –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    } else {
      logger.warn('Telegram bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
    }
    
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start();
    logger.info('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞ –∑–∞–ø—É—â–µ–Ω');
    
    // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app.listen(config.server.port, '0.0.0.0', () => {
      logger.info(`üåø –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.server.port}`);
      logger.info(`üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:${config.server.port}`);
    });
    
  } catch (error) {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ Telegram
    try {
      if (telegramBot.initialize()) {
        await telegramBot.sendErrorNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞', error.message);
      }
    } catch (telegramError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram:', telegramError);
    }
    
    process.exit(1);
  }
}

initializeSystem();

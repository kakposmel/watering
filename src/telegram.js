const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const logger = require('./logger');

class TelegramBotController {
  constructor(moistureSensor, pumpController) {
    this.moistureSensor = moistureSensor;
    this.pumpController = pumpController;
    this.bot = null;
    this.chatId = null;
  }

  initialize() {
    if (!config.telegram.token) {
      logger.error('Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    try {
      this.bot = new TelegramBot(config.telegram.token, { polling: true });
      this.chatId = config.telegram.chatId;
      
      this.setupCommands();
      logger.info('Telegram bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram bot:', error);
      return false;
    }
  }

  setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã
    this.bot.onText(/\/moisture/, async (msg) => {
      const chatId = msg.chat.id;

      try {
        const readings = await this.moistureSensor.readAllSensors();
        const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å–æ—Å–∞—Ö, –∫–∞–∫ –≤ API
        const pumps = this.pumpController.getPumpStates();

        let message = 'üå± *–¢–µ–∫—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã:*\n\n';

        for (let index = 0; index < readings.length; index++) {
          const reading = readings[index];
          const zoneName = settings?.zones[index]?.name || `–ó–æ–Ω–∞ ${index + 1}`;
          const zoneEnabled = settings?.zones[index]?.enabled !== false;
          const statusEmoji = this.getStatusEmoji(reading.status);
          const statusText = this.getStatusText(reading.status);

          if (!zoneEnabled) {
            message += `*${zoneName}:* ‚ö´ –û—Ç–∫–ª—é—á–µ–Ω–∞\n\n`;
            continue;
          }

          message += `*${zoneName}:* ${statusEmoji} ${statusText}\n`;
          if (reading.rawValue !== null) {
            message += `–£—Ä–æ–≤–µ–Ω—å: ${reading.moisturePercent}% (${reading.rawValue} –º–í)\n`;
          }
          const todayWaterings = pumps.dailyCount?.[index] ?? 0;
          const lastWatering = pumps.lastWatering?.[index]
            ? new Date(pumps.lastWatering[index]).toLocaleString('ru-RU')
            : '–ù–∏–∫–æ–≥–¥–∞';
          message += `–ü–æ–ª–∏–≤–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${todayWaterings}\n`;
          message += `–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: ${lastWatering}\n\n`;
        }

        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–ª–∞–∂–Ω–æ—Å—Ç–∏:', error);
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–∏–≤–∞
    this.bot.onText(/\/water (\d+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const zone = parseInt(match[1]) - 1; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç 1-4, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 0-3
      
      if (zone < 0 || zone >= config.relays.length) {
        await this.bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã –∑–æ–Ω—ã 1-${config.relays.length}`);
        return;
      }
      
      try {
        const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
        const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
        
        const success = await this.pumpController.startWatering(zone);
        if (success) {
          await this.bot.sendMessage(chatId, `üíß –ü–æ–ª–∏–≤ "${zoneName}" –∑–∞–ø—É—â–µ–Ω`);
        } else {
          await this.bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–∏–≤ "${zoneName}"`);
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–∏–≤–∞ –∑–æ–Ω—ã ${zone + 1}:`, error);
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–∏–≤–∞');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–æ–Ω—ã
    this.bot.onText(/\/toggle (\d+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const zone = parseInt(match[1]) - 1;
      
      if (zone < 0 || zone >= config.relays.length) {
        await this.bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã –∑–æ–Ω—ã 1-${config.relays.length}`);
        return;
      }
      
      try {
        if (!this.moistureSensor.storage) {
          await this.bot.sendMessage(chatId, '‚ùå –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
          return;
        }
        
        const settings = await this.moistureSensor.storage.loadSettings();
        const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
        settings.zones[zone].enabled = !settings.zones[zone].enabled;
        await this.moistureSensor.storage.saveSettings(settings);
        
        const status = settings.zones[zone].enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞';
        await this.bot.sendMessage(chatId, `‚úÖ "${zoneName}" ${status}`);
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–æ–Ω—ã ${zone + 1}:`, error);
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–æ–Ω—ã');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      const helpMessage = `üåø *–ö–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞:*

/moisture - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã
/water <–Ω–æ–º–µ—Ä –∑–æ–Ω—ã> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–∏–≤ –∑–æ–Ω—ã (1-${config.relays.length})
/toggle <–Ω–æ–º–µ—Ä –∑–æ–Ω—ã> - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–æ–Ω—É (1-${config.relays.length})
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ü—Ä–∏–º–µ—Ä—ã:*
/water 1 - –ø–æ–ª–∏—Ç—å –∑–æ–Ω—É 1
/toggle 2 - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–æ–Ω—É 2`;
      
      await this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    this.bot.on('message', async (msg) => {
      if (msg.text && msg.text.startsWith('/') && !msg.text.match(/\/(moisture|water|toggle|help)/)) {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥');
      }
    });
  }

  async sendWateringNotification(zone, action = 'started') {
    if (!this.bot || !this.chatId) return;

    try {
      const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
      const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
      const actionText = action === 'started' ? '–∑–∞–ø—É—â–µ–Ω' : '–∑–∞–≤–µ—Ä—à–µ–Ω';
      const emoji = action === 'started' ? 'üíß' : '‚úÖ';
      
      const message = `${emoji} *–ü–æ–ª–∏–≤ "${zoneName}" ${actionText}*\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
      
      await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
    }
  }

  async sendAutomaticWateringNotification(zone, moistureLevel) {
    if (!this.bot || !this.chatId) return;

    try {
      const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
      const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
      const message = `ü§ñ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª–∏–≤*\n\n"${zoneName}" –ø–æ–ª–∏—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: ${moistureLevel}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
      
      await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ–ø–æ–ª–∏–≤–µ:', error);
    }
  }

  getStatusEmoji(status) {
    const emojiMap = {
      'air': 'üèúÔ∏è',
      'dry': 'üèúÔ∏è',
      'moist': 'üå±',
      'wet': 'üíß',
      'water': 'üí¶',
      'disabled': '‚ö´',
      'error': '‚ùå'
    };
    return emojiMap[status] || '‚ùì';
  }

  getStatusText(status) {
    const statusMap = {
      'air': '–í–æ–∑–¥—É—Ö - –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –¥–∞—Ç—á–∏–∫',
      'dry': '–°—É—Ö–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–∏–≤',
      'moist': '–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å',
      'wet': '–•–æ—Ä–æ—à–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å',
      'water': '–ü–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ',
      'disabled': '–û—Ç–∫–ª—é—á–µ–Ω–æ',
      'error': '–û—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞'
    };
    return statusMap[status] || status;
  }

  async sendSystemNotification(message) {
    if (!this.bot || !this.chatId) return;

    try {
      await this.bot.sendMessage(this.chatId, `üîß *–°–∏—Å—Ç–µ–º–∞:* ${message}`, { parse_mode: 'Markdown' });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async sendWarningNotification(message) {
    if (!this.bot || !this.chatId) return;

    try {
      await this.bot.sendMessage(this.chatId, `‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:* ${message}`, { parse_mode: 'Markdown' });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', error);
    }
  }

  async sendErrorNotification(title, details) {
    if (!this.bot || !this.chatId) return;

    try {
      const message = `‚ùå *–û—à–∏–±–∫–∞:* ${title}\n\n–î–µ—Ç–∞–ª–∏: ${details}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
      await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
    }
  }
}

module.exports = TelegramBotController;

const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const logger = require('./logger');

class TelegramBotController {
  constructor(moistureSensor, pumpController) {
    this.moistureSensor = moistureSensor;
    this.pumpController = pumpController;
    this.bot = null;
    this.chatId = null;
  }

  initialize() {
    if (!config.telegram.token) {
      logger.error('Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    try {
      this.bot = new TelegramBot(config.telegram.token, { polling: true });
      this.chatId = config.telegram.chatId;
      
      this.setupCommands();
      logger.info('Telegram bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram bot:', error);
      return false;
    }
  }

  setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª–∏–≤–æ–≤
    this.bot.onText(/\/schedule/, async (msg) => {
      const chatId = msg.chat.id;

      try {
        const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
        const pumps = this.pumpController.getPumpStates();

        let message = 'üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–æ–≤:*\n\n';

        for (let index = 0; index < config.relays.length; index++) {
          const zoneSettings = settings?.zones[index];
const zoneName = this.escapeMarkdown(zoneSettings?.name || `–ó–æ–Ω–∞ ${index + 1}`);
          const enabled = zoneSettings?.enabled && zoneSettings?.scheduleEnabled;
          const schedule = zoneSettings?.schedule || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
          const duration = zoneSettings?.waterDuration || 15;
          
          const statusEmoji = enabled ? '‚úÖ' : '‚ùå';
          
          message += `*${zoneName}:* ${statusEmoji}\n`;
          if (enabled) {
            message += `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${schedule}\n`;
            message += `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} —Å–µ–∫\n`;
            // Add next watering time if available
            // message += `–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤: ${nextTime}\n`;
          } else {
            message += `–û—Ç–∫–ª—é—á–µ–Ω–æ\n`;
          }
          message += '\n';
        }

        // Try Markdown first, fallback to plain text if it fails
        try {
          await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (parseError) {
          // If Markdown parsing fails, send as plain text
          const plainMessage = message.replace(/\*/g, '').replace(/\\/g, '');
          await this.bot.sendMessage(chatId, plainMessage);
        }
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id;

      try {
        const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
        const pumps = this.pumpController.getPumpStates();

        let message = 'üå± *–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª–∏–≤–∞:*\n\n';

        for (let index = 0; index < config.relays.length; index++) {
          const zoneSettings = settings?.zones[index];
const zoneName = this.escapeMarkdown(settings?.zones[index]?.name || `–ó–æ–Ω–∞ ${index + 1}`);
          const enabled = zoneSettings?.enabled;
          const scheduleEnabled = zoneSettings?.scheduleEnabled;
          const isActive = pumps.states?.[index] || false;
          
          let statusEmoji;
          let statusText;
          
          if (!enabled) {
            statusEmoji = '‚ö´';
            statusText = '–û—Ç–∫–ª—é—á–µ–Ω–∞';
          } else if (isActive) {
            statusEmoji = 'üíß';
            statusText = '–ü–æ–ª–∏–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ';
          } else if (scheduleEnabled) {
            statusEmoji = '‚úÖ';
            statusText = '–ì–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–∏–≤—É';
          } else {
            statusEmoji = '‚è∏Ô∏è';
            statusText = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ';
          }

          message += `*${zoneName}:* ${statusEmoji} ${statusText}\n`;
          
          if (enabled && scheduleEnabled) {
            const schedule = zoneSettings?.schedule || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            const duration = zoneSettings?.waterDuration || 15;
            message += `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${schedule}\n`;
            message += `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} —Å–µ–∫\n`;
          }
          
          const lastWatering = pumps.lastWatering?.[index]
            ? new Date(pumps.lastWatering[index]).toLocaleString('ru-RU')
            : '–ù–∏–∫–æ–≥–¥–∞';
          message += `–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: ${lastWatering}\n\n`;
        }

        // Try Markdown first, fallback to plain text if it fails
        try {
          await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (parseError) {
          // If Markdown parsing fails, send as plain text
          const plainMessage = message.replace(/\*/g, '').replace(/\\/g, '');
          await this.bot.sendMessage(chatId, plainMessage);
        }
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:', error);
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    this.bot.onText(/\/setschedule (\d+) ([\d\s\*,\/\-]+) (\d+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const zone = parseInt(match[1]) - 1; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç 1-4, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 0-3
      const schedule = match[2].trim();
      const duration = parseInt(match[3]);
      
      if (zone < 0 || zone >= config.relays.length) {
        await this.bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã –∑–æ–Ω—ã 1-${config.relays.length}`);
        return;
      }
      
      if (duration < 1 || duration > 300) {
        await this.bot.sendMessage(chatId, '‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 300 —Å–µ–∫—É–Ω–¥');
        return;
      }
      
      try {
        // Validate cron expression
        const cron = require('node-cron');
        if (!cron.validate(schedule)) {
          await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: "0 8 * * *" (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00)');
          return;
        }
        
        if (!this.moistureSensor.storage) {
          await this.bot.sendMessage(chatId, '‚ùå –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
          return;
        }
        
        const settings = await this.moistureSensor.storage.loadSettings();
        const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
        
        // Update schedule settings
        settings.zones[zone].schedule = schedule;
        settings.zones[zone].waterDuration = duration;
        settings.zones[zone].scheduleEnabled = true;
        
        await this.moistureSensor.storage.saveSettings(settings);
        
await this.bot.sendMessage(chatId, `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "${this.escapeMarkdown(zoneName)}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${schedule}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} —Å–µ–∫`);
        
        // Note: Schedule controller restart will be handled by the main app
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∑–æ–Ω—ã ${zone + 1}:`, error);
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–∏–≤–∞
    this.bot.onText(/\/water (\d+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const zone = parseInt(match[1]) - 1; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç 1-4, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 0-3
      
      if (zone < 0 || zone >= config.relays.length) {
        await this.bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã –∑–æ–Ω—ã 1-${config.relays.length}`);
        return;
      }
      
      try {
        const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
        const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
        
        const success = await this.pumpController.startWatering(zone);
        if (success) {
await this.bot.sendMessage(chatId, `üíß –ü–æ–ª–∏–≤ "${this.escapeMarkdown(zoneName)}" –∑–∞–ø—É—â–µ–Ω`);
        } else {
await this.bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–∏–≤ "${this.escapeMarkdown(zoneName)}"`);
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–∏–≤–∞ –∑–æ–Ω—ã ${zone + 1}:`, error);
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–∏–≤–∞');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–æ–Ω—ã
    this.bot.onText(/\/toggle (\d+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const zone = parseInt(match[1]) - 1;
      
      if (zone < 0 || zone >= config.relays.length) {
        await this.bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–æ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã –∑–æ–Ω—ã 1-${config.relays.length}`);
        return;
      }
      
      try {
        if (!this.moistureSensor.storage) {
          await this.bot.sendMessage(chatId, '‚ùå –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
          return;
        }
        
        const settings = await this.moistureSensor.storage.loadSettings();
        const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
        settings.zones[zone].enabled = !settings.zones[zone].enabled;
        await this.moistureSensor.storage.saveSettings(settings);
        
        const status = settings.zones[zone].enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞';
        await this.bot.sendMessage(chatId, `‚úÖ "${zoneName}" ${status}`);
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–æ–Ω—ã ${zone + 1}:`, error);
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–æ–Ω—ã');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      const helpMessage = `üåø *–ö–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ–ª–∏–≤–∞:*

/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
/schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–æ–≤
/setschedule <–Ω–æ–º–µ—Ä> <—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ> <—Å–µ–∫—É–Ω–¥—ã> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/water <–Ω–æ–º–µ—Ä –∑–æ–Ω—ã> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–∏–≤ –∑–æ–Ω—ã (1-${config.relays.length})
/toggle <–Ω–æ–º–µ—Ä –∑–æ–Ω—ã> - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–æ–Ω—É (1-${config.relays.length})
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ü—Ä–∏–º–µ—Ä—ã:*
/setschedule 1 "0 8 * * *" 15 - –ø–æ–ª–∏–≤ –∑–æ–Ω—ã 1 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –Ω–∞ 15 —Å–µ–∫
/water 1 - —Ä—É—á–Ω–æ–π –ø–æ–ª–∏–≤ –∑–æ–Ω—ã 1
/toggle 2 - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–æ–Ω—É 2

*–§–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (cron):*
"–º–∏–Ω—É—Ç—ã —á–∞—Å—ã –¥–µ–Ω—å –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏"
"0 8 * * *" - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
"0 7,19 * * *" - –≤ 7:00 –∏ 19:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
"0 9 * * 1,3,5" - –≤ 9:00 –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º, —Å—Ä–µ–¥–∞–º –∏ –ø—è—Ç–Ω–∏—Ü–∞–º`;
      
      await this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    this.bot.on('message', async (msg) => {
      if (msg.text && msg.text.startsWith('/') && !msg.text.match(/\/(status|schedule|setschedule|water|toggle|help)/)) {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥');
      }
    });
  }

  async sendWateringNotification(zone, action = 'started') {
    if (!this.bot || !this.chatId) return;

    try {
      const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
      const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
      const safeZoneName = this.escapeMarkdown(zoneName);
      const actionText = action === 'started' ? '–∑–∞–ø—É—â–µ–Ω' : '–∑–∞–≤–µ—Ä—à–µ–Ω';
      const emoji = action === 'started' ? 'üíß' : '‚úÖ';
      
      const message = `${emoji} *–ü–æ–ª–∏–≤ "${safeZoneName}" ${actionText}*\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
      
      // Try Markdown first, fallback to plain text if it fails
      try {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      } catch (parseError) {
        // If Markdown parsing fails, send as plain text
        const plainMessage = message.replace(/\*/g, '').replace(/\\/g, '');
        await this.bot.sendMessage(this.chatId, plainMessage);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
    }
  }

  async sendScheduledWateringNotification(zone, duration) {
    if (!this.bot || !this.chatId) return;

    try {
      const settings = this.moistureSensor.storage ? await this.moistureSensor.storage.loadSettings() : null;
      const zoneName = settings?.zones[zone]?.name || `–ó–æ–Ω–∞ ${zone + 1}`;
      const safeZoneName = this.escapeMarkdown(zoneName);
      const message = `üìÖ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª–∏–≤*\n\n"${safeZoneName}" –ø–æ–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} —Å–µ–∫\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
      
      // Try Markdown first, fallback to plain text if it fails
      try {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      } catch (parseError) {
        // If Markdown parsing fails, send as plain text
        const plainMessage = message.replace(/\*/g, '').replace(/\\/g, '');
        await this.bot.sendMessage(this.chatId, plainMessage);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª–∏–≤–µ:', error);
    }
  }

  escapeMarkdown(text) {
    // Escape special Markdown characters that can cause parsing errors
    return text.replace(/[_*\[\]()~`>#+=|{}.!-]/g, '\\$&');
  }

  getStatusEmoji(status) {
    const emojiMap = {
      'air': 'üèúÔ∏è',
      'dry': 'üèúÔ∏è',
      'moist': 'üå±',
      'wet': 'üíß',
      'water': 'üí¶',
      'disabled': '‚ö´',
      'error': '‚ùå'
    };
    return emojiMap[status] || '‚ùì';
  }

  getStatusText(status) {
    const statusMap = {
      'air': '–í–æ–∑–¥—É—Ö - –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –¥–∞—Ç—á–∏–∫',
      'dry': '–°—É—Ö–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–∏–≤',
      'moist': '–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å',
      'wet': '–•–æ—Ä–æ—à–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å',
      'water': '–ü–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ',
      'disabled': '–û—Ç–∫–ª—é—á–µ–Ω–æ',
      'error': '–û—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞'
    };
    return statusMap[status] || status;
  }

  async sendSystemNotification(message) {
    if (!this.bot || !this.chatId) return;

    try {
      const safeMessage = this.escapeMarkdown(message);
      const fullMessage = `üîß *–°–∏—Å—Ç–µ–º–∞:* ${safeMessage}`;
      
      // Try Markdown first, fallback to plain text if it fails
      try {
        await this.bot.sendMessage(this.chatId, fullMessage, { parse_mode: 'Markdown' });
      } catch (parseError) {
        // If Markdown parsing fails, send as plain text
        const plainMessage = fullMessage.replace(/\*/g, '').replace(/\\/g, '');
        await this.bot.sendMessage(this.chatId, plainMessage);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async sendWarningNotification(message) {
    if (!this.bot || !this.chatId) return;

    try {
      const safeMessage = this.escapeMarkdown(message);
      const fullMessage = `‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:* ${safeMessage}`;
      
      // Try Markdown first, fallback to plain text if it fails
      try {
        await this.bot.sendMessage(this.chatId, fullMessage, { parse_mode: 'Markdown' });
      } catch (parseError) {
        // If Markdown parsing fails, send as plain text
        const plainMessage = fullMessage.replace(/\*/g, '').replace(/\\/g, '');
        await this.bot.sendMessage(this.chatId, plainMessage);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', error);
    }
  }

  async sendErrorNotification(title, details) {
    if (!this.bot || !this.chatId) return;

    try {
      const safeTitle = this.escapeMarkdown(title);
      const safeDetails = this.escapeMarkdown(details);
      const message = `‚ùå *–û—à–∏–±–∫–∞:* ${safeTitle}\n\n–î–µ—Ç–∞–ª–∏: ${safeDetails}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
      
      // Try Markdown first, fallback to plain text if it fails
      try {
        await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      } catch (parseError) {
        // If Markdown parsing fails, send as plain text
        const plainMessage = message.replace(/\*/g, '').replace(/\\/g, '');
        await this.bot.sendMessage(this.chatId, plainMessage);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
    }
  }
}

module.exports = TelegramBotController;
